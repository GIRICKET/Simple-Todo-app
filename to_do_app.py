# -*- coding: utf-8 -*-
"""to-do simple app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1n0ssEdBLwufJ_CayJ2dVx5abbkA2stsl
"""

import streamlit as st
from datetime import datetime

# Set up page config
st.set_page_config(page_title="📝 Advanced To-Do List", layout="centered")

st.title("📝 Advanced To-Do List")

# Initialize session state for tasks
if "tasks" not in st.session_state:
    st.session_state.tasks = []

# --- Add New Task ---
with st.form(key="add_task_form"):
    new_task = st.text_input("Enter a new task")
    task_date = st.date_input("Task Date", min_value=datetime.today().date())
    task_time = st.time_input("Task Time", datetime.now().time())
    task_priority = st.selectbox("Priority", ["Low", "Medium", "High"])
    task_status = st.selectbox("Status", ["Pending", "Completed"])
    submit = st.form_submit_button("Add Task")

    if submit and new_task:
        task_datetime = datetime.combine(task_date, task_time)
        st.session_state.tasks.append({
            "task": new_task,
            "datetime": task_datetime,
            "priority": task_priority,
            "status": task_status
        })
        st.success(f"Task added for {task_datetime.strftime('%Y-%m-%d %H:%M:%S')} with priority {task_priority} and status {task_status}")
    elif submit and not new_task:
        st.warning("Please enter a task.")

# --- Search Tasks ---
search_query = st.text_input("Search tasks")
if search_query:
    filtered_tasks = [task for task in st.session_state.tasks if search_query.lower() in task["task"].lower()]
else:
    filtered_tasks = st.session_state.tasks

# --- Sort Tasks by Date ---
sort_order = st.radio("Sort tasks by date", ["Ascending", "Descending"])
if sort_order == "Ascending":
    filtered_tasks.sort(key=lambda x: x["datetime"])
else:
    filtered_tasks.sort(key=lambda x: x["datetime"], reverse=True)

# --- Display Tasks ---
st.markdown("### ✅ Your Tasks")

if filtered_tasks:
    for i, task_obj in enumerate(filtered_tasks):
        task_datetime_str = task_obj["datetime"].strftime('%Y-%m-%d %H:%M:%S')
        st.write(f"{i + 1}. **{task_obj['task']}** (Due: {task_datetime_str}) | "
                 f"Priority: {task_obj['priority']} | Status: {task_obj['status']}")

        # --- Task Actions: Edit/Delete ---
        col1, col2 = st.columns(2)
        with col1:
            if st.button(f"Edit Task {i + 1}"):
                # This is a simple demonstration of editing; more complex editing logic can be added
                new_status = st.selectbox("Edit Status", ["Pending", "Completed"])
                st.session_state.tasks[i]["status"] = new_status
                st.success(f"Task {i + 1} updated to {new_status}")

        with col2:
            if st.button(f"Delete Task {i + 1}"):
                del st.session_state.tasks[i]
                st.info(f"Task {i + 1} deleted")
                break

else:
    st.info("No tasks found.")

# --- Optional: Clear all tasks ---
if st.button("🗑️ Clear All Tasks"):
    st.session_state.tasks.clear()
    st.info("All tasks cleared.")